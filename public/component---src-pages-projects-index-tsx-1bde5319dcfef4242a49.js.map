{"version":3,"file":"component---src-pages-projects-index-tsx-1bde5319dcfef4242a49.js","mappings":"yHAkBA,IAAIA,EAAa,cAhBjB,SAA8BC,EAAOC,GACnC,OAAoB,gBAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,EACbC,OAAQ,eACR,cAAe,OACfC,IAAKR,GACJD,GAAqB,gBAAoB,OAAQ,CAClDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,iCAKP,O,iGC4DA,EAhEgD,SAAC,GAQ1C,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,MACAC,EAKI,EALJA,SACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,MACAC,EACI,EADJA,KAEMC,GAAeC,EAAAA,EAAAA,GAASP,GACxBQ,EAAcT,EAAQ,GAAM,EAE5BU,EACE,6EADFA,EAEG,kDAGHC,EACE,qFADFA,EAEG,0DAGT,OACEC,EAAAA,cAAAA,MAAAA,CACEC,UAAS,0IACPJ,EAAcC,EAAuBC,IAGvCC,EAAAA,cAACE,EAAAA,KAAD,CAAMC,GAAE,aAAeX,EAAQS,UAAU,0BACvCD,EAAAA,cAACI,EAAAA,EAAD,CACEf,MAAOM,EACPU,IAAQZ,EAAL,mBACHQ,UAAS,+BACPJ,EAAcC,EAAwBC,MAI5CC,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,2DACbD,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,oDACbP,EADH,MACkBH,GAElBS,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iCACbD,EAAAA,cAACE,EAAAA,KAAD,CACEC,GAAE,aAAeX,EACjBS,UAAU,uCAEVD,EAAAA,cAAAA,KAAAA,KAAKP,IAEPO,EAAAA,cAAAA,OAAAA,KAAOV,IAETU,EAAAA,cAACE,EAAAA,KAAD,CACEC,GAAE,aAAeX,EACjBS,UAAU,6FAEVD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,kDAAf,gBAGAD,EAAAA,cAACM,EAAAA,EAAD,CAAsBL,UAAU,uF,uECN1C,UA3DqB,SAAC,GAAwD,IAAvDM,EAAsD,EAAtDA,KACPC,EAD6D,EAAhDC,KACID,SAAxBE,MAEP,OACEV,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACW,EAAAA,EAAD,KACEX,EAAAA,cAAAA,OAAAA,CAAMY,QAAQ,UACdZ,EAAAA,cAAAA,QAAAA,KAAAA,4BACAA,EAAAA,cAAAA,OAAAA,CAAMa,IAAI,YAAYC,KAAK,uCAE7Bd,EAAAA,cAACe,EAAAA,EAAD,CAAQR,KAAMA,EAAMd,MAAM,YACxBO,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,8BACZO,EAASQ,KAAI,SAACC,EAAS7B,GACtB,MAA2C6B,EAAQC,KAA5CC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,YAAa5B,EAAnC,EAAmCA,KAEnC,OACEQ,EAAAA,cAACqB,EAAAA,EAAD,iBACMJ,EAAQC,KADd,CAEEI,IAAK9B,EACLJ,MAAOA,EACPC,MAAO8B,EACPzB,KAAM0B","sources":["webpack://portfolio/./node_modules/@heroicons/react/outline/esm/ArrowNarrowRightIcon.js","webpack://portfolio/./src/components/cards/project-card.tsx","webpack://portfolio/./src/pages/projects/index.tsx"],"sourcesContent":["import * as React from \"react\";\n\nfunction ArrowNarrowRightIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M17 8l4 4m0 0l-4 4m4-4H3\"\n  }));\n}\n\nvar ForwardRef = React.forwardRef(ArrowNarrowRightIcon);\nexport default ForwardRef;","import React from 'react';\nimport {GatsbyImage, getImage, IGatsbyImageData} from 'gatsby-plugin-image';\nimport {Link} from 'gatsby';\nimport {ArrowNarrowRightIcon} from '@heroicons/react/outline';\n\nexport interface ProjectCardProps {\n  index: number;\n  image: any;\n  overview: string;\n  role: string | null;\n  slug: string;\n  title: string;\n  type: string;\n}\n\nconst ProjectCard: React.FC<ProjectCardProps> = ({\n  index,\n  image,\n  overview,\n  role,\n  slug,\n  title,\n  type,\n}) => {\n  const projectImage = getImage(image) as IGatsbyImageData;\n  const isImageLeft = index % 2 === 0;\n\n  const imageLeftStyles = {\n    card: 'flex md:flex-row rounded-t-xl rounded-b-xl md:rounded-l-xl md:rounded-r-lg',\n    image: 'rounded-t-lg md:rounded-tr-none md:rounded-l-lg',\n  };\n\n  const imageRightStyles = {\n    card: 'flex md:flex-row-reverse rounded-t-xl rounded-b-xl md:rounded-r-xl md:rounded-l-lg',\n    image: 'w-full rounded-t-lg md:rounded-tl-none md:rounded-r-lg ',\n  };\n\n  return (\n    <div\n      className={`w-full h-full md:h-[450px] flex flex-col md:flex-row bg-brand-grey-100 shadow-lg shadow-brand-black justify-start text-brand-grey-900 ${\n        isImageLeft ? imageLeftStyles.card : imageRightStyles.card\n      }`}\n    >\n      <Link to={`/projects/${slug}`} className=\"w-full h-full md:w-3/5\">\n        <GatsbyImage\n          image={projectImage}\n          alt={`${title} featured mockup`}\n          className={`w-full h-full object-cover ${\n            isImageLeft ? imageLeftStyles.image : imageRightStyles.image\n          }`}\n        />\n      </Link>\n      <div className=\"flex flex-col h-full justify-center w-full md:w-2/5 p-8\">\n        <span className=\"flex flex-row text-sm italic text-brand-grey-700\">\n          {type} &mdash; {role}\n        </span>\n        <div className=\"flex flex-col gap-1 mt-5 mb-4\">\n          <Link\n            to={`/projects/${slug}`}\n            className=\"max-w-max hover:text-brand-blue-500\"\n          >\n            <h3>{title}</h3>\n          </Link>\n          <span>{overview}</span>\n        </div>\n        <Link\n          to={`/projects/${slug}`}\n          className=\"group flex h-8 items-center mt-4 max-w-max hover:cursor-pointer hover:text-brand-blue-500\"\n        >\n          <div className=\"h-full font-outfit text-base flex items-center\">\n            View Project\n          </div>\n          <ArrowNarrowRightIcon className=\"h-6 mt-0.5 ml-0.5 group-hover:translate-x-1 transition-transform duration-500\" />\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectCard;\n","import React from 'react';\nimport {graphql, PageProps} from 'gatsby';\nimport {Helmet} from 'react-helmet';\n\nimport Layout from '../../components/layout';\nimport {ProjectCard} from '../../components/cards';\n\nconst ProjectsPage = ({path, data}: PageProps<Queries.ProjectsPageQuery>) => {\n  const {edges: projects} = data.projects;\n\n  return (\n    <>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Projects | Travis Henson</title>\n        <link rel=\"canonical\" href=\"https://travishenson.com/projects\" />\n      </Helmet>\n      <Layout path={path} title=\"Projects\">\n        <div className=\"flex flex-col mt-12 gap-16\">\n          {projects.map((project, index) => {\n            const {featuredImage, projectType, slug} = project.node;\n\n            return (\n              <ProjectCard\n                {...project.node}\n                key={slug}\n                index={index}\n                image={featuredImage}\n                type={projectType}\n              />\n            );\n          })}\n        </div>\n      </Layout>\n    </>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ProjectsPage {\n    projects: allGraphCmsProject(\n      filter: {stage: {eq: PUBLISHED}}\n      sort: {fields: finishDate, order: DESC}\n    ) {\n      edges {\n        node {\n          id\n          featuredImage {\n            gatsbyImageData(width: 1500, layout: CONSTRAINED, placeholder: BLURRED)\n          }\n          featuredProject\n          finishDate\n          liveProjectUrl\n          overview\n          projectType\n          role\n          slug\n          startDate\n          techStack\n          title\n        }\n      }\n    }\n  }\n`;\n\nexport default ProjectsPage;\n"],"names":["ForwardRef","props","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d","index","image","overview","role","slug","title","type","projectImage","getImage","isImageLeft","imageLeftStyles","imageRightStyles","React","className","Link","to","GatsbyImage","alt","ArrowNarrowRightIcon","path","projects","data","edges","Helmet","charSet","rel","href","Layout","map","project","node","featuredImage","projectType","ProjectCard","key"],"sourceRoot":""}